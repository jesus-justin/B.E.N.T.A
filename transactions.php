<?php
/**
 * Transactions Page for B.E.N.T.A
 * Business Expense and Net Transaction Analyzer
 */

session_start();

require_once 'includes/auth.php';

$auth = new Auth();

// Check authentication
if (!$auth->isLoggedIn()) {
    header('Location: login.php');
    exit;
}

$user = $auth->getCurrentUser();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transactions - B.E.N.T.A</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="dashboard">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <h2><i class="fas fa-chart-line"></i> B.E.N.T.A</h2>
            </div>
            <ul class="sidebar-menu">
                <li><a href="index.php"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                <li class="active"><a href="transactions.php"><i class="fas fa-exchange-alt"></i> Transactions</a></li>
                <li><a href="reports.php"><i class="fas fa-chart-bar"></i> Reports</a></li>
                <li><a href="settings.php"><i class="fas fa-cog"></i> Settings</a></li>
                <li><a href="#" onclick="logout()"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
            </ul>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <header class="page-header">
                <h1>Transactions</h1>
                <button class="btn btn-primary" onclick="showAddTransactionModal()">
                    <i class="fas fa-plus"></i> Add Transaction
                </button>
            </header>

            <!-- Filters -->
            <div class="filters">
                <div class="filter-group">
                    <label for="filterType">Type:</label>
                    <select id="filterType">
                        <option value="">All Types</option>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterCategory">Category:</label>
                    <select id="filterCategory">
                        <option value="">All Categories</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="filterStartDate">From:</label>
                    <input type="date" id="filterStartDate">
                </div>
                <div class="filter-group">
                    <label for="filterEndDate">To:</label>
                    <input type="date" id="filterEndDate">
                </div>
                <button class="btn btn-secondary" onclick="applyFilters()">
                    <i class="fas fa-filter"></i> Apply Filters
                </button>
                <button class="btn btn-outline" onclick="clearFilters()">
                    <i class="fas fa-times"></i> Clear
                </button>
            </div>

            <!-- Transactions Table -->
            <div class="data-table">
                <table id="transactionsTable">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Category</th>
                            <th>Type</th>
                            <th>Amount</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="transactionsBody">
                        <tr>
                            <td colspan="6" class="loading">Loading transactions...</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination" id="pagination">
                <!-- Pagination will be generated by JavaScript -->
            </div>
        </main>
    </div>

    <!-- Add/Edit Transaction Modal -->
    <div id="transactionModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modalTitle">Add Transaction</h3>
                <span class="modal-close" onclick="closeModal()">&times;</span>
            </div>
            <form id="transactionForm">
                <input type="hidden" id="transactionId">
                <div class="form-group">
                    <label for="transactionAmount">Amount</label>
                    <input type="number" id="transactionAmount" step="0.01" required>
                </div>
                <div class="form-group">
                    <label for="transactionDescription">Description</label>
                    <input type="text" id="transactionDescription" required>
                </div>
                <div class="form-group">
                    <label for="transactionCategory">Category</label>
                    <select id="transactionCategory" required>
                        <option value="">Select Category</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="transactionDate">Date</label>
                    <input type="date" id="transactionDate" value="<?php echo date('Y-m-d'); ?>" required>
                </div>
                <div class="form-group">
                    <label for="transactionType">Type</label>
                    <select id="transactionType" required>
                        <option value="income">Income</option>
                        <option value="expense">Expense</option>
                    </select>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save Transaction</button>
                    <button type="button" class="btn btn-outline" onclick="closeModal()">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content small">
            <div class="modal-header">
                <h3>Confirm Delete</h3>
                <span class="modal-close" onclick="closeDeleteModal()">&times;</span>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this transaction?</p>
                <p class="delete-warning">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-danger" onclick="confirmDelete()">Delete</button>
                <button class="btn btn-outline" onclick="closeDeleteModal()">Cancel</button>
            </div>
        </div>
    </div>

    <script src="assets/js/main.js"></script>
    <script src="assets/js/animations.js"></script>
    <script>
        let currentPage = 1;
        let currentFilters = {};
        let transactionToDelete = null;

        // Load transactions
        async function loadTransactions(page = 1, filters = {}) {
            try {
                let url = `api/transactions.php?page=${page}&limit=20`;

                // Add filters to URL
                Object.keys(filters).forEach(key => {
                    if (filters[key]) {
                        url += `&${key}=${encodeURIComponent(filters[key])}`;
                    }
                });

                const response = await fetch(url);
                const result = await response.json();

                if (result.success) {
                    displayTransactions(result.data);
                    updatePagination(result.pagination);
                } else {
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                console.error('Error loading transactions:', error);
                showMessage('Error loading transactions', 'error');
            }
        }

        // Display transactions in table
        function displayTransactions(transactions) {
            const tbody = document.getElementById('transactionsBody');

            if (transactions.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="no-data">No transactions found</td></tr>';
                return;
            }

            let html = '';
            transactions.forEach(transaction => {
                const typeClass = transaction.type === 'income' ? 'income' : 'expense';
                const typeIcon = transaction.type === 'income' ? 'arrow-up' : 'arrow-down';

                html += `
                    <tr>
                        <td>${transaction.formatted_date}</td>
                        <td>${transaction.description}</td>
                        <td>${transaction.category_name}</td>
                        <td><span class="type-badge ${typeClass}"><i class="fas fa-${typeIcon}"></i> ${transaction.type}</span></td>
                        <td class="amount ${typeClass}">${transaction.formatted_amount}</td>
                        <td class="actions">
                            <button class="btn btn-sm btn-outline" onclick="editTransaction(${transaction.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteTransaction(${transaction.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `;
            });

            tbody.innerHTML = html;
        }

        // Update pagination
        function updatePagination(pagination) {
            const paginationDiv = document.getElementById('pagination');
            if (!pagination || pagination.totalPages <= 1) {
                paginationDiv.innerHTML = '';
                return;
            }

            let html = '<div class="pagination-controls">';

            if (pagination.hasPrev) {
                html += `<button class="btn btn-outline" onclick="loadTransactions(${pagination.prevPage})">Previous</button>`;
            }

            for (let i = 1; i <= pagination.totalPages; i++) {
                const activeClass = i === pagination.currentPage ? 'active' : '';
                html += `<button class="btn btn-outline ${activeClass}" onclick="loadTransactions(${i})">${i}</button>`;
            }

            if (pagination.hasNext) {
                html += `<button class="btn btn-outline" onclick="loadTransactions(${pagination.nextPage})">Next</button>`;
            }

            html += '</div>';
            paginationDiv.innerHTML = html;
        }

        // Load categories for filters and forms
        async function loadCategories() {
            try {
                const response = await fetch('api/categories.php');
                const result = await response.json();

                if (result.success) {
                    const filterSelect = document.getElementById('filterCategory');
                    const formSelect = document.getElementById('transactionCategory');

                    // Clear existing options except "All Categories"
                    filterSelect.innerHTML = '<option value="">All Categories</option>';
                    formSelect.innerHTML = '<option value="">Select Category</option>';

                    result.data.forEach(category => {
                        const filterOption = document.createElement('option');
                        filterOption.value = category.id;
                        filterOption.textContent = category.name;
                        filterSelect.appendChild(filterOption);

                        const formOption = document.createElement('option');
                        formOption.value = category.id;
                        formOption.textContent = category.name;
                        formSelect.appendChild(formOption);
                    });
                }
            } catch (error) {
                console.error('Error loading categories:', error);
            }
        }

        // Apply filters
        function applyFilters() {
            currentFilters = {
                type: document.getElementById('filterType').value,
                category_id: document.getElementById('filterCategory').value,
                start_date: document.getElementById('filterStartDate').value,
                end_date: document.getElementById('filterEndDate').value
            };

            currentPage = 1;
            loadTransactions(currentPage, currentFilters);
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('filterType').value = '';
            document.getElementById('filterCategory').value = '';
            document.getElementById('filterStartDate').value = '';
            document.getElementById('filterEndDate').value = '';

            currentFilters = {};
            currentPage = 1;
            loadTransactions(currentPage, currentFilters);
        }

        // Show add transaction modal
        function showAddTransactionModal() {
            document.getElementById('modalTitle').textContent = 'Add Transaction';
            document.getElementById('transactionId').value = '';
            document.getElementById('transactionForm').reset();
            document.getElementById('transactionDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('transactionModal').style.display = 'block';
        }

        // Edit transaction
        async function editTransaction(id) {
            try {
                const response = await fetch(`api/transactions.php?id=${id}`);
                const result = await response.json();

                if (result.success && result.data.length > 0) {
                    const transaction = result.data[0];

                    document.getElementById('modalTitle').textContent = 'Edit Transaction';
                    document.getElementById('transactionId').value = transaction.id;
                    document.getElementById('transactionAmount').value = transaction.amount;
                    document.getElementById('transactionDescription').value = transaction.description;
                    document.getElementById('transactionCategory').value = transaction.category_id;
                    document.getElementById('transactionDate').value = transaction.date;
                    document.getElementById('transactionType').value = transaction.type;

                    document.getElementById('transactionModal').style.display = 'block';
                }
            } catch (error) {
                showMessage('Error loading transaction', 'error');
            }
        }

        // Delete transaction
        function deleteTransaction(id) {
            transactionToDelete = id;
            document.getElementById('deleteModal').style.display = 'block';
        }

        // Confirm delete
        async function confirmDelete() {
            if (!transactionToDelete) return;

            try {
                const response = await fetch(`api/transactions.php?id=${transactionToDelete}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    closeDeleteModal();
                    loadTransactions(currentPage, currentFilters);
                    showMessage('Transaction deleted successfully', 'success');
                } else {
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                showMessage('Error deleting transaction', 'error');
            }

            transactionToDelete = null;
        }

        // Close modals
        function closeModal() {
            document.getElementById('transactionModal').style.display = 'none';
            document.getElementById('transactionForm').reset();
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            transactionToDelete = null;
        }

        // Handle transaction form submission
        document.getElementById('transactionForm').addEventListener('submit', async function(e) {
            e.preventDefault();

            const transactionId = document.getElementById('transactionId').value;
            const data = {
                amount: document.getElementById('transactionAmount').value,
                description: document.getElementById('transactionDescription').value,
                category_id: document.getElementById('transactionCategory').value,
                date: document.getElementById('transactionDate').value,
                type: document.getElementById('transactionType').value
            };

            if (transactionId) {
                data.id = transactionId;
            }

            try {
                const method = transactionId ? 'PUT' : 'POST';
                const response = await fetch('api/transactions.php', {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                const result = await response.json();

                if (result.success) {
                    closeModal();
                    loadTransactions(currentPage, currentFilters);
                    const action = transactionId ? 'updated' : 'added';
                    showMessage(`Transaction ${action} successfully!`, 'success');
                } else {
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                showMessage('An error occurred. Please try again.', 'error');
            }
        });

        // Logout function
        async function logout() {
            try {
                const response = await fetch('api/logout.php', { method: 'POST' });
                const result = await response.json();

                if (result.success) {
                    window.location.href = 'login.php';
                }
            } catch (error) {
                window.location.href = 'login.php';
            }
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            loadTransactions();
            loadCategories();
        });

        // Close modals when clicking outside
        window.onclick = function(event) {
            const transactionModal = document.getElementById('transactionModal');
            const deleteModal = document.getElementById('deleteModal');

            if (event.target === transactionModal) {
                closeModal();
            }
            if (event.target === deleteModal) {
                closeDeleteModal();
            }
        };
    </script>
</body>
</html>
